cmake_minimum_required(VERSION 3.18)

set (PROJECT_NAME MikotoEditor)
project(${PROJECT_NAME})


# CXX Lang Requirements
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set( cur_path ${CMAKE_CURRENT_SOURCE_DIR} )
cmake_path(GET cur_path PARENT_PATH parent_path)

# Projects source files
set(SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Main.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Application.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/Editor.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/EditorLayer.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/EditorRunner.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/HierarchyPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/InspectorPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/SettingsPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/ScenePanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/StatsPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/RendererPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/ConsolePanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/ContentBrowserPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/AssetsManagerPanel.cc
        ${CMAKE_CURRENT_SOURCE_DIR}/src/MaterialEditorPanel.cc)


# External dependencies
add_subdirectory(${parent_path}/Mikoto-Engine ./build/engine) # mikoto-engine

# Libraries to link against target
set(LIBRARIES MikotoEngine)

# Compiler flags
if (MSVC)
    # Compile commands for Windows

else()
    # Compile commands for Linux
    add_compile_options(-fsanitize=address -D_DEBUG -Wall -Wextra -Wpedantic)
    # Sanitize
    add_link_options(-fsanitize=address)
endif()

# Header files directories
include_directories(.)
include_directories(${parent_path}/Mikoto-Engine)
include_directories(${parent_path}/Third-Party/fmt/include)
include_directories(${parent_path}/Third-Party/spdlog/include)
include_directories(${parent_path}/Third-Party/entt/single_include)
include_directories(${parent_path}/Third-Party/volk)
include_directories(${parent_path}/Third-Party/imgui)
include_directories(${parent_path}/Third-Party/glfw/include)
include_directories(${parent_path}/Third-Party/glew/include)
include_directories(${parent_path}/Third-Party/imgui/backends)
include_directories(${parent_path}/Third-Party/glm/)
include_directories(${parent_path}/Third-Party/stb/)
include_directories(${parent_path}/Third-Party/VulkanMemoryAllocator/include)
include_directories(${parent_path}/Third-Party/ImGuizmo)
include_directories(${parent_path}/Third-Party/yaml-cpp/include)
include_directories(${parent_path}/Third-Party/nativefiledialog-extended/src/include)

add_executable(${PROJECT_NAME} ${SOURCES})
target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBRARIES})




# Needed if we want to use FMT as an external library and not the
# one bundled with SPDLOG
# For more: https://github.com/gabime/spdlog/wiki/0.-FAQ
target_compile_definitions(${PROJECT_NAME} PRIVATE SPDLOG_FMT_EXTERNAL)

# For Key and Mouse Codes we use the GLFW ones
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_KEY_CODES)
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_MOUSE_CODES)
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_INPUT)

target_compile_definitions(${PROJECT_NAME} PRIVATE VK_NO_PROTOTYPES)

# The perspective projection matrix generated by GLM will use the OpenGL depth
# range of -1.0 to 1.0 by default. We need to configure it to use the Vulkan
# range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_FORCE_DEPTH_ZERO_TO_ONE)
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_FORCE_RADIANS)
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_ENABLE_EXPERIMENTAL)

# If you fetch pointers to all Vulkan functions in a custom way, e.g. using some loader like Volk:
# Define VMA_STATIC_VULKAN_FUNCTIONS and VMA_DYNAMIC_VULKAN_FUNCTIONS to 0.
# Pass these pointers via structure VmaVulkanFunctions.
# // https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/quick_start.html#quick_start_project_setup
target_compile_definitions(${PROJECT_NAME} PRIVATE VMA_STATIC_VULKAN_FUNCTIONS=0)
target_compile_definitions(${PROJECT_NAME} PRIVATE VMA_DYNAMIC_VULKAN_FUNCTIONS=0)