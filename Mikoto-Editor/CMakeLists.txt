cmake_minimum_required(VERSION 3.18)

project(MikotoEditor)

# CXX Lang Requirements
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set( cur_path ${CMAKE_CURRENT_SOURCE_DIR} )
cmake_path(GET cur_path PARENT_PATH parent_path)

# Setup Mikoto Engine source file
FILE(GLOB_RECURSE SOURCE_FILES "")
SOURCE_GROUP(MIKOTO_SOURCES FILES ${SOURCE_FILES})

# Libraries to link against target
set(LIBRARIES MikotoEngine)

# Compiler flags
if (MSVC)
    # Compile commands for Windows

else()
    # Compile commands for Linux
    add_compile_options(-fsanitize=address -D_DEBUG -Wall -Wextra -Wpedantic)
    # Sanitize
    add_link_options(-fsanitize=address)
endif()

add_executable(${PROJECT_NAME} ${MIKOTO_SOURCES})
target_link_libraries(${PROJECT_NAME} PRIVATE ${LIBRARIES})

# Header files directories
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC .)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Mikoto-Engine)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/spdlog/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/glfw/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/glew/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/imgui)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/imgui/backends)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/glm/)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/stb/)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/entt/single_include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/volk)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/fmt/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/assimp/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/VulkanMemoryAllocator/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/ImGuizmo)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/yaml-cpp/include)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${parent_path}/Third-Party/nativefiledialog-extended/src/include)


# Needed if we want to use FMT as an external library and not the
# one bundled with SPDLOG
# For more: https://github.com/gabime/spdlog/wiki/0.-FAQ
target_compile_definitions(${PROJECT_NAME} PRIVATE SPDLOG_FMT_EXTERNAL)

# For Key and Mouse Codes we use the GLFW ones
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_KEY_CODES)
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_MOUSE_CODES)
target_compile_definitions(${PROJECT_NAME} PRIVATE USE_GLFW_INPUT)

target_compile_definitions(${PROJECT_NAME} PRIVATE VK_NO_PROTOTYPES)

# The perspective projection matrix generated by GLM will use the OpenGL depth
# range of -1.0 to 1.0 by default. We need to configure it to use the Vulkan
# range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition.
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_FORCE_DEPTH_ZERO_TO_ONE)
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_FORCE_RADIANS)
target_compile_definitions(${PROJECT_NAME} PRIVATE GLM_ENABLE_EXPERIMENTAL)

# If you fetch pointers to all Vulkan functions in a custom way, e.g. using some loader like Volk:
# Define VMA_STATIC_VULKAN_FUNCTIONS and VMA_DYNAMIC_VULKAN_FUNCTIONS to 0.
# Pass these pointers via structure VmaVulkanFunctions.
# // https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/quick_start.html#quick_start_project_setup
target_compile_definitions(${PROJECT_NAME} PRIVATE VMA_STATIC_VULKAN_FUNCTIONS=0)
target_compile_definitions(${PROJECT_NAME} PRIVATE VMA_DYNAMIC_VULKAN_FUNCTIONS=0)